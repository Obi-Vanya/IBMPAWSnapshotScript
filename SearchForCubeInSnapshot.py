import time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager
import gzip
from pathlib import Path
import codecs
import tkinter as tk
from tkinter import ttk
import pathlib
import sys
sys.path.insert(1, str(pathlib.Path(__file__).parent.resolve()))
import settings
import rsa
import os

####Создание директории для вывода
errCreate=0
try:
    os.mkdir(str(pathlib.Path(__file__).parent.resolve())+'\\'+'_Output')
except:
    errCreate=1


privateKey =rsa.PrivateKey(7281075739009287806768015752209289410271044883918960917421685723948455653573907533938176545280783174258024727956939943035074077775603237316239961159714417, 65537, 5583043152912610283557579620607800490323799053230687138306482943765838254135388927196204216857504275576667732487857215715449721044439107147675453478162497, 5925588345364238942707904166368032881819419170042580107042886845837205044139089513, 1228751528901849264223582414182081329648943767399792869199027630000977609)

def wait_for_element_to_load(driver,text):
    err=1
    while(err==1):
        try:
            driver.find_element(By.XPATH, text)
            err=0
        except:
            err=1
            time.sleep(0.1)
    return

def element_exists(driver,text):
    exist=0
    try:
        driver.find_element(By.XPATH, text)
        exist=1
    except:
        exist=0
    return exist

def find_text_in_element(element,textstrings):
    for text in textstrings:
        found_text=element.get_attribute("title")
        if(found_text.find(text)>-1):
            break
    return found_text.find(text)

def get_book_name_from_path(path_text):
    sindextext=path_text.rfind("/")+1
    return path_text[sindextext:]

def array_to_string(array):
    outputText=''
    for text in array:
        outputText=outputText+text+'\n'
    return outputText

def remove_elements_from_one_array_that_in_another(arr1,arr2):
    for i in arr2:
        for k in arr1:
            if i in arr1:
                arr1.remove(i)
    return arr1

def text_to_array(text):
    arr=[]
    arr=text.split('\n')
    while('' in arr):
        arr.remove('')   
    return arr




def main(takeSnapshot):
    
    #Работа с входными переменными
    url = settings.url
    urlTest=settings.urlTest

    database = varTextBD.get()
    folder= varTextFolder.get()
    ignoreBooksStrings=text_to_array(str(text_widget_Ignore_Folders.get("1.0",tk.END)))  
    SnapshotPrefixText=varSnapshotPrefixText.get()
    deleteAutoGeneratedSnapshots=varDelete.get()
    takeSnapshot=takeSnapshot
    userLogin =varTextLogin.get()
    userPassword=varTextPassword.get()
    #inputFilePath=varTextPath.get()
    sleepArray=settings.sleepArray
    rememberMe=varRememberMe.get()
    isCAM=varIsCAM.get()

    ###Работа со списком введенных кубов
    if(takeSnapshot):
        cubesToSearch=text_to_array(str(text_widget_Cubes.get("1.0",tk.END))) 
    else:
        cubesToSearch=text_to_array(str(text_widget_Cubes_WO_Snapshot.get("1.0",tk.END))) 

    snapshotsToSearch=text_to_array(str(text_widget_Snapshots.get("1.0",tk.END)))  

    downloads_path=str(Path.home() / "Downloads")

    prefixFileName='Dev_'
    if(isCAM):
        prefixFileName='Test_'
        


    publicKey =rsa.PublicKey(7281075739009287806768015752209289410271044883918960917421685723948455653573907533938176545280783174258024727956939943035074077775603237316239961159714417,65537)
    ###перекладываем стандартные переменные в файл
    settingsFile=codecs.open(str(pathlib.Path(__file__).parent.resolve())+'\\'+'settings.py','w','utf-8')
    settingsFile.write("%s = '%s'\n" %("url",url))
    settingsFile.write("%s = '%s'\n" %("urlTest",urlTest))
    settingsFile.write("%s = '%s'\n" %("database",database))
    settingsFile.write("%s = '%s'\n" %("folder",folder))
    settingsFile.write("%s = %s\n" %("ignoreBooksStrings",ignoreBooksStrings))
    settingsFile.write("%s = '%s'\n" %("SnapshotPrefixText",SnapshotPrefixText))
    settingsFile.write("%s = %s\n" %("deleteAutoGeneratedSnapshots",deleteAutoGeneratedSnapshots))
    if(varRememberMe.get()):
        settingsFile.write("%s = '%s'\n" %("userLogin",userLogin))
        settingsFile.write("%s = %s\n" %("userPassword",rsa.encrypt(userPassword.encode(),publicKey)))
    else:
        settingsFile.write("%s = '%s'\n" %("userLogin",''))
        settingsFile.write("%s = %s\n" %("userPassword",b''))

    settingsFile.write("%s = %s\n" %("cubesToSearch",cubesToSearch))
    settingsFile.write("%s = %s\n" %("snapshotsToSearch",snapshotsToSearch))
    #settingsFile.write("%s = '%s'\n" %("inputFilePath",inputFilePath))
    settingsFile.write("%s = %s\n" %("sleepArray",sleepArray))
    settingsFile.write("%s = %s\n" %("rememberMe",rememberMe))
    settingsFile.write("%s = %s\n" %("isCAM",isCAM))
    settingsFile.close()





    if(takeSnapshot):

        options=Options()
        #options.add_experimental_option( "prefs",{'profile.managed_default_content_settings.javascript': 2})
        #options.add_argument("--headless")
        #options.add_argument("--disable-gpu")
        options.add_argument("--allow-insecure-localhost")
        options.add_argument("--allow-running-insecure-content")
        options.add_argument("--ignore-certificate-errors")
        options.add_argument("--no-sandbox")
        options.add_argument("--lang=en")
        #options.add_experimental_option("detach", True)
        options.set_capability("acceptSslCerts", True)
        options.set_capability("acceptInsecureCerts", True)
        driver = webdriver.Chrome(ChromeDriverManager().install(),chrome_options=options)

        #Если авторизация не CAM(дев)
        if(not isCAM):
            # Opening the URL
            driver.get(url)
            username = driver.find_element(By.ID, "username")
            username.send_keys(userLogin)

            password = driver.find_element(By.ID, "password")
            password.send_keys(userPassword)
            driver.find_element(By.ID, "loginButton").click()

                #Ждем как появится кнопка Lifecycle managment и нажимаем на нее
            wait_for_element_to_load(driver,"//*[@title='Migrate any assets that you have permission to view from a source environment (or tenant) on cloud to a target environment (or tenant) on cloud.']")
            driver.find_element(By.XPATH, "//*[@title='Migrate any assets that you have permission to view from a source environment (or tenant) on cloud to a target environment (or tenant) on cloud.']").click()
            
            ##Переходим во внутренний фрейм
            wait_for_element_to_load(driver,"//iframe[@class='singlePaneContainer_iframe']")
            driver.switch_to.frame(driver.find_element(By.XPATH,"//iframe[@class='singlePaneContainer_iframe']"))

            #Ждем как появится кнопка Create Snapshot и нажимаем на нее
            wait_for_element_to_load(driver,"//*[@class='migrateNewPackageTab buttonTab']")
            driver.find_element(By.XPATH, "//*[@class='migrateNewPackageTab buttonTab']").click()

            ##Выбираем нужную модель
            wait_for_element_to_load(driver,"//*[contains(text(), "+"'"+database+"'"+")]")
            driver.find_element(By.XPATH, "//*[contains(text(), "+"'"+database+"'"+")]").click()

            ##Применяем фильтры
            wait_for_element_to_load(driver,"//*[@id='mo_applyFilters']")
            driver.find_element(By.XPATH, "//*[@id='mo_applyFilters']").click()

            ##Ждем пока загрузятся книги и выбираем нужные
            wait_for_element_to_load(driver,"//*[@class='bookDataName']")

            rows=driver.find_elements(By.XPATH, "//*[@class='bookDataPath']")
            i=0
            bookNames=[]
            SnapshotNames=[]
            SnapshotName=''
            for row in rows:
                #Не грузим архивную версию, и все что в игнор листе, так же грузим лишь 1 раз книги с одинаковым названием, для этого записываем в массив
                bookName=get_book_name_from_path(row.get_attribute("title"))
                if((find_text_in_element(row,ignoreBooksStrings)==-1) and (not (bookName in bookNames))):
                    row.click()
                    i+=1
                    bookNames.append(bookName)
                if((i>=99) or((len(rows)-1)==rows.index(row))):
                    #выгружаем
                    driver.find_element(By.XPATH, "//*[contains(text(), 'Add to cart')]").click()
                    #ждем и нажимаем кнопку Save
                    wait_for_element_to_load(driver,"//*[@class='migrateOutExportButton']")
                    driver.find_element(By.XPATH, "//*[@class='migrateOutExportButton']").click()
                    #ждем форму экспорта, записываем название и грузим
                    wait_for_element_to_load(driver,"//*[@class='environmentSnapShotNameInput']")
                    SnapshotName=prefixFileName+SnapshotPrefixText+time.strftime('%d%m%Y%H%M%S', time.localtime())
                    driver.find_element(By.XPATH, "//*[@class='environmentSnapShotNameInput']").send_keys(SnapshotName)
                    driver.find_element(By.XPATH, "//*[@class='dialogButton primary']").click()
                    #Если варнинг даблкликаем
                    #####!!!!!!!!!!!!
                    time.sleep(sleepArray[0])
                    ########!!!!!!!!!
                    if(element_exists(driver,"//*[@class='danglingNavButtonHeader']")):
                        SnapshotName=prefixFileName+SnapshotPrefixText+time.strftime('%d%m%Y%H%M%S', time.localtime())
                        driver.find_element(By.XPATH, "//*[@class='environmentSnapShotNameInput']").clear()
                        driver.find_element(By.XPATH, "//*[@class='environmentSnapShotNameInput']").send_keys(SnapshotName)
                        driver.find_element(By.XPATH, "//*[@class='dialogButton primary']").click()
                    i=0
                    SnapshotNames.append(SnapshotName)
                    #Ждем пока закроется
                    while(element_exists(driver,"//*[@class='danglingNavButtonHeader']")):
                        time.sleep(1)
                    #удаляем все из корзины
                    wait_for_element_to_load(driver,"//*[@class='wfp_ded_close itemDeleteAll collapsInlineGroup']")
                    driver.find_element(By.XPATH, "//*[@class='wfp_ded_close itemDeleteAll collapsInlineGroup']").click()
                    #Ждем пока удалится
                    while(element_exists(driver,"//span[@class='itemDataName']")):
                        time.sleep(1)


            #Выходим из Айфрейма
            driver.switch_to.default_content()

            #Нажимаем на ссылку Administration
            wait_for_element_to_load(driver,"//*[@class='bx--link']")
            driver.find_element(By.XPATH, "//*[@class='bx--link']").click()

            #Ждем как появится кнопка Lifecycle managment и нажимаем на нее
            wait_for_element_to_load(driver,"//*[@title='Migrate any assets that you have permission to view from a source environment (or tenant) on cloud to a target environment (or tenant) on cloud.']")
            driver.find_element(By.XPATH, "//*[@title='Migrate any assets that you have permission to view from a source environment (or tenant) on cloud to a target environment (or tenant) on cloud.']").click()

            ##Переходим во внутренний фрейм
            wait_for_element_to_load(driver,"//iframe[@class='singlePaneContainer_iframe']")
            driver.switch_to.frame(driver.find_element(By.XPATH,"//iframe[@class='singlePaneContainer_iframe']"))

            #Ждем как появится кнопка Manage SnapShots и нажимаем на нее
            wait_for_element_to_load(driver,"//*[@class='migrateManagePackageTab buttonTab']")
            driver.find_element(By.XPATH, "//*[@class='migrateManagePackageTab buttonTab']").click()


            #Вбиваем в фильтр префикс своих снапшотов
            wait_for_element_to_load(driver,"//*[@class='search-box']")
            driver.find_element(By.XPATH, "//*[@class='search-box']").send_keys(SnapshotPrefixText)
            driver.find_element(By.XPATH, "//*[@class='search-box']").send_keys(Keys.ENTER)



            for Snapshot in SnapshotNames:
                #Находим наши снапшоты и экспортим
                wait_for_element_to_load(driver,"//*[contains(text(), '"+Snapshot+"')]")
                #Даблклик изза того что когнос не дает экспортить с первого раза
                driver.find_element(By.XPATH, "//*[contains(text(), '"+Snapshot+"')]").click()
                ########!!!!!!!!!!!
                time.sleep(sleepArray[1])
                ########!!!!!!!!!!!!!
                driver.find_element(By.XPATH, "//*[contains(text(), '"+Snapshot+"')]").click()
                wait_for_element_to_load(driver,"//*[@class='manageSnapShotExport']")
                driver.find_element(By.XPATH, "//*[@class='manageSnapShotExport']").click()


            #Удаляем автогенерированные снапшоты
            if(deleteAutoGeneratedSnapshots):
                wait_for_element_to_load(driver,"//*[@class='wamSnapshotOptions wfp_menu_ellipsis']")
                while(element_exists(driver,"//*[@class='wamSnapshotOptions wfp_menu_ellipsis']")):
                    wait_for_element_to_load(driver,"//*[@class='wamSnapshotOptions wfp_menu_ellipsis']")
                    driver.find_element(By.XPATH, "//*[@class='wamSnapshotOptions wfp_menu_ellipsis']").click()
                    #нажимаем на три точки и удаляем с подтверждением
                    wait_for_element_to_load(driver,"//*[@class=' wfp_sed_delete_search']")
                    driver.find_element(By.XPATH, "//*[@class=' wfp_sed_delete_search']").click()
                    wait_for_element_to_load(driver,"//*[@class='deleteAsset']")
                    driver.find_element(By.XPATH, "//*[@class='deleteAsset']").click()
                    ######!!!!!!!!!!
                    time.sleep(sleepArray[2])
                    ######!!!!!!!!!!!
                    #ждем пока не появятся элементы, или надпись что их нет
                    while(not(element_exists(driver,"//*[@class='deleteAsset']")) and not(element_exists(driver,"//*[@class='dataTables_empty']"))):
                        time.sleep(1)

############################################################################################################################################################        
        #Если авторизация CAM(тест/прод)
        if(isCAM):
            completeUrlTest='http://'+userLogin+':'+userPassword+'@'+urlTest
            driver.get(completeUrlTest)

            #Ждем как появится кнопка Lifecycle managment и нажимаем на нее
            wait_for_element_to_load(driver,"//*[@title='Migrate any assets that you have permission to view from a source environment (or tenant) on cloud to a target environment (or tenant) on cloud.']")
            driver.find_element(By.XPATH, "//*[@title='Migrate any assets that you have permission to view from a source environment (or tenant) on cloud to a target environment (or tenant) on cloud.']").click()
        
            #Ждем как появится кнопка Add и нажимаем на нее
            wait_for_element_to_load(driver,"//*[@class='actionAddnew enabledAction  bx--btn bx--btn--primary']")
            driver.find_element(By.XPATH, "//*[@class='actionAddnew enabledAction  bx--btn bx--btn--primary']").click()

            #ждем форму экспорта, записываем название и грузим
            wait_for_element_to_load(driver,"//*[@class='bx--text-input inputValue-rowItem snp-name-input']")
            SnapshotName=prefixFileName+SnapshotPrefixText+time.strftime('%d%m%Y%H%M%S', time.localtime())
            driver.find_element(By.XPATH, "//*[@class='bx--text-input inputValue-rowItem snp-name-input']").send_keys(SnapshotName)
            #######
            time.sleep(sleepArray[3])
            ######
            #Ждем кнопку Next и жмем
            wait_for_element_to_load(driver,"//*[@class='tsh-button  bx--btn bx--btn--primary']")
            driver.find_element(By.XPATH, "//*[@class='tsh-button  bx--btn bx--btn--primary']").click()

            ###Ждем пока загрузится и выбираем Shared
            wait_for_element_to_load(driver,"//*[contains(text(), 'Shared')]")
            driver.find_element(By.XPATH, "//*[contains(text(), 'Shared')]").click()

            ##Выбираем нужную ПАПКУ и находим ее галку, нажимаем
            wait_for_element_to_load(driver,"//*[@class='bx--link paaListview-item-with-icon sm']")
            folderElementNameClasses=driver.find_elements(By.XPATH, "//*[@class='bx--link paaListview-item-with-icon sm']")
            numFolder=0
            for folderElementNameClass in folderElementNameClasses:
                if(folderElementNameClass.text==folder):
                    break
                numFolder+=1

            wait_for_element_to_load(driver,"//*[@class='bx--form-item bx--checkbox-wrapper list-checkbox-wrapper']")
            checkMarks=driver.find_elements(By.XPATH, "//*[@class='bx--form-item bx--checkbox-wrapper list-checkbox-wrapper']")
            n=0
            for checkMark in checkMarks:
                if(n==numFolder):
                    checkMark.click()
                    break
                n+=1
        
            
            ##Ждем пока загрузятся книги и выбираем нужные
            wait_for_element_to_load(driver,"//*[@class='complexItem-child1']")

            
            endOfBooks=False
            i=100
            bookNames=[]
            bookNamesNotLoaded=[]
            SnapshotNames=[]
            SnapshotNames.append(SnapshotName)
            SnapshotName=''
            booksChecked=0
            booksCheckedNow=0
            while(not endOfBooks):
                ###Грузим все книги, и ПО ОДНОЙ минусуем те что нам не нужны
                wait_for_element_to_load(driver,"//*[@class='complexItem-child1']")
                rows=driver.find_elements(By.XPATH, "//*[@class='complexItem-child1']")
                booksCheckedNow=0
                for row in rows:
                    wait_for_element_to_load(driver,"//*[@class='complexItem-child1']")
                    bookName=row.text
                    if(booksCheckedNow>=booksChecked):
                        ####Находим путь книги, сверяем на архив
                        wait_for_element_to_load(driver,"//*[@class='complexItem-child2']")
                        pathToBooks=driver.find_elements(By.XPATH, "//*[@class='complexItem-child2']")
                        n=0
                        for pathToBook in pathToBooks:
                            if n==booksChecked:
                                break
                            n+=1

                        
                        
                        if((find_text_in_element(pathToBook,ignoreBooksStrings)!=-1) or (bookName in bookNames)):
                            ###Выходим по родителям до минуса, и исключаем книгу
                            ###Такой же цикл по минусикам
                            wait_for_element_to_load(driver,"//*[@class='paaListview-item-secondary just-icon overflowShow bx--btn bx--btn--sm bx--btn--ghost bx--tooltip--hidden bx--btn--icon-only bx--tooltip__trigger bx--tooltip--a11y bx--btn--icon-only--left bx--tooltip--align-center']")
                            minusFields=driver.find_elements(By.XPATH, "//*[@class='paaListview-item-secondary just-icon overflowShow bx--btn bx--btn--sm bx--btn--ghost bx--tooltip--hidden bx--btn--icon-only bx--tooltip__trigger bx--tooltip--a11y bx--btn--icon-only--left bx--tooltip--align-center']")
                            n=0
                            for minusField in minusFields:
                                if n==booksChecked:
                                    break
                                n+=1  
                            ###Нажимаем на минус
                            minusField.click()
                            booksChecked=rows.index(row)
                            break
                        booksChecked+=1
                    wait_for_element_to_load(driver,"//*[@class='complexItem-child1']")
                    booksCheckedNow+=1
                    bookNames.append(bookName)
                    if(row==rows[-1]):
                        numberString=driver.find_element(By.XPATH, "//*[@class='snp-part-title-info']").text
                        i=int(numberString[numberString.find('(')+1:numberString.find('/')])
                        k=0
                        while(i>99):
                            wait_for_element_to_load(driver,"//*[@class='complexItem-child1']")
                            rows=driver.find_elements(By.XPATH, "//*[@class='complexItem-child1']")
                            booksCheckedNow=0
                            for row in rows:
                                wait_for_element_to_load(driver,"//*[@class='complexItem-child1']")
                                bookNameNotLoaded=row.text
                                bookNamesNotLoaded.append(bookNameNotLoaded)
                                complexItem=row.find_element(By.XPATH,'..')
                                textTruncate=complexItem.find_element(By.XPATH,'..')
                                itemWithIcon=textTruncate.find_element(By.XPATH,'..')
                                listViewRow=itemWithIcon.find_element(By.XPATH,'..')
                                ###Нажимаем на минус
                                listViewRow.find_element(By.XPATH, "//*[@class='paaListview-item-secondary just-icon overflowShow bx--btn bx--btn--sm bx--btn--ghost bx--tooltip--hidden bx--btn--icon-only bx--tooltip__trigger bx--tooltip--a11y bx--btn--icon-only--left bx--tooltip--align-center']").click()
                                k+=1
                                i-=1
                                break
                
                    
                        

                wait_for_element_to_load(driver,"//*[@class='complexItem-child1']")
                #print(i,bookNames)

                if((i<=99) or (endOfBooks)):
                    ###Если какой то снимок доел книги(в нем меньше 99 книг), то выходим из цикла создания снимков
                    if(i<99):
                        endOfBooks = True
                    ####Удаляем из загруженных те что убрали
                    bookNames=remove_elements_from_one_array_that_in_another(bookNames,bookNamesNotLoaded)
                    bookNamesNotLoaded=[]
                    #выгружаем
                    driver.find_element(By.XPATH, "//*[@class='tsh-button  bx--btn bx--btn--primary']").click()
                    #ждем подменюшку варнинга если будет!!!!
                    #####
                    wait_for_element_to_load(driver,"//*[@class='bx--modal is-visible']")
                    while(element_exists(driver,"//*[@class='bx--modal is-visible']")):
                        if(element_exists(driver,"//*[@class='bx--btn bx--btn--danger']")):
                            driver.find_element(By.XPATH, "//*[@class='bx--btn bx--btn--danger']").click()
                        time.sleep(0.3)

                    if(not endOfBooks):
                        #Ждем как появится кнопка Add и нажимаем на нее
                        wait_for_element_to_load(driver,"//*[@class='actionAddnew enabledAction  bx--btn bx--btn--primary']")
                        driver.find_element(By.XPATH, "//*[@class='actionAddnew enabledAction  bx--btn bx--btn--primary']").click()

                        #ждем форму экспорта, записываем название и грузим
                        wait_for_element_to_load(driver,"//*[@class='bx--text-input inputValue-rowItem snp-name-input']")
                        SnapshotName=prefixFileName+SnapshotPrefixText+time.strftime('%d%m%Y%H%M%S', time.localtime())
                        driver.find_element(By.XPATH, "//*[@class='bx--text-input inputValue-rowItem snp-name-input']").send_keys(SnapshotName)
                        #######
                        time.sleep(sleepArray[3])
                        ######
                        SnapshotNames.append(SnapshotName)
                        #Ждем кнопку Next и жмем
                        wait_for_element_to_load(driver,"//*[@class='tsh-button  bx--btn bx--btn--primary']")
                        driver.find_element(By.XPATH, "//*[@class='tsh-button  bx--btn bx--btn--primary']").click()

                        ###Ждем пока загрузится и выбираем Shared
                        wait_for_element_to_load(driver,"//*[contains(text(), 'Shared')]")
                        driver.find_element(By.XPATH, "//*[contains(text(), 'Shared')]").click()

                        #Выбираем нужную ПАПКУ и находим ее галку, нажимаем
                        wait_for_element_to_load(driver,"//*[@class='bx--link paaListview-item-with-icon sm']")
                        folderElementNameClasses=driver.find_elements(By.XPATH, "//*[@class='bx--link paaListview-item-with-icon sm']")
                        numFolder=0
                        for folderElementNameClass in folderElementNameClasses:
                            if(folderElementNameClass.text==folder):
                                break
                            numFolder+=1

                        wait_for_element_to_load(driver,"//*[@class='bx--form-item bx--checkbox-wrapper list-checkbox-wrapper']")
                        checkMarks=driver.find_elements(By.XPATH, "//*[@class='bx--form-item bx--checkbox-wrapper list-checkbox-wrapper']")
                        n=0
                        for checkMark in checkMarks:
                            if(n==numFolder):
                                checkMark.click()
                                break
                            n+=1
                
                        ##Ждем пока загрузятся подпапки
                        wait_for_element_to_load(driver,"//*[@class='complexItem-child1']")
                        i=100
                        booksChecked=0
                    


            #Вбиваем в фильтр префикс своих снапшотов
            wait_for_element_to_load(driver,"//*[@class='bx--search-input']")
            driver.find_element(By.XPATH, "//*[@class='bx--search-input']").send_keys(SnapshotPrefixText)
            driver.find_element(By.XPATH, "//*[@class='bx--search-input']").send_keys(Keys.ENTER)



            for Snapshot in SnapshotNames:
                #Находим наши снапшоты и экспортим
                wait_for_element_to_load(driver,"//*[contains(text(), '"+Snapshot+"')]")
                #Даблклик изза того что когнос не дает экспортить с первого раза
                driver.find_element(By.XPATH, "//*[contains(text(), '"+Snapshot+"')]").click()
                ########!!!!!!!!!!!
                time.sleep(sleepArray[1])
                ########!!!!!!!!!!!!!
                driver.find_element(By.XPATH, "//*[contains(text(), '"+Snapshot+"')]").click()
                wait_for_element_to_load(driver,"//*[@class='export-content bx--btn bx--btn--md bx--btn--secondary']")
                driver.find_element(By.XPATH, "//*[@class='export-content bx--btn bx--btn--md bx--btn--secondary']").click()

                ######Ждем пока экспортируется, если варнинг кликаем
                wait_for_element_to_load(driver,"//*[@class='bx--modal is-visible']")
                while(element_exists(driver,"//*[@class='bx--modal is-visible']")):
                    if(element_exists(driver,"//*[@class='bx--btn bx--btn--danger']")):
                        driver.find_element(By.XPATH, "//*[@class='bx--btn bx--btn--danger']").click()
                    time.sleep(0.3)



            #Удаляем автогенерированные снапшоты
            if(deleteAutoGeneratedSnapshots):
                wait_for_element_to_load(driver,"//*[@class='paaListview-item-secondary snapshot-date']")
                while(element_exists(driver,"//*[@class='paaListview-item-secondary snapshot-date']")):
                    wait_for_element_to_load(driver,"//*[@class='paaListview-item-secondary snapshot-date']")
                    driver.find_element(By.XPATH, "//*[@class='paaListview-item-secondary snapshot-date']").click()
                    #нажимаем на удаление с подтверждением(удаление-вторая из двух одинаковых кнопок)
                    wait_for_element_to_load(driver,"//*[@class='action enabledAction  bx--btn bx--btn--sm bx--btn--ghost bx--tooltip--hidden bx--btn--icon-only bx--tooltip__trigger bx--tooltip--a11y bx--btn--icon-only--bottom bx--tooltip--align-center']")
                    importDeleteButons=driver.find_elements(By.XPATH, "//*[@class='action enabledAction  bx--btn bx--btn--sm bx--btn--ghost bx--tooltip--hidden bx--btn--icon-only bx--tooltip__trigger bx--tooltip--a11y bx--btn--icon-only--bottom bx--tooltip--align-center']")
                    n=0
                    for importDeleteButon in importDeleteButons:
                        if(n==1):
                            importDeleteButon.click()
                            break
                        n+=1
                    
                    wait_for_element_to_load(driver,"//*[@class='bx--btn bx--btn--danger']")
                    driver.find_element(By.XPATH, "//*[@class='bx--btn bx--btn--danger']").click()
                    ######!!!!!!!!!!
                    time.sleep(sleepArray[2])
                    ######!!!!!!!!!!!
                    #ждем пока не появятся элементы, или надпись что их нет
                    while(not(element_exists(driver,"//*[@class='paaListview-item-secondary snapshot-date']")) and not(element_exists(driver,"//*[@class='noItemsInfo']"))):
                        time.sleep(1)

    ############Part 2 Работа с текстовиками
    # куб и вью  "view\":\"Факт BS по счетам ГК\",\"cube\":\"BS_Actual_SAP\"
    #вкладка  \"type\":\"container\",\"title\":{\"translationTable\":{\"Default\":\"Корр-ка входящего сальдо\"}}
    #книга \"kind\":\"c#content\",\"name\":\"Аллокация на типы Бизнеса\",\"description\"


    if(not takeSnapshot):
        SnapshotNames=snapshotsToSearch
        prefixFileName=snapshotsToSearch[0][0:snapshotsToSearch[0].find('_')+1]

    ###Создаем файлик
    outputTxTName=prefixFileName+cubesToSearch[0]+'_'+time.strftime('%d%m%Y%H%M%S', time.localtime())+'.txt'
    outputFilePath=str(pathlib.Path(__file__).parent.resolve())+'\\_Output'+'\\'+outputTxTName



    outputFile=open(outputFilePath, 'w')
    outputFile.write(database+'\n')
    outputFile.write(time.strftime('%d-%m-%Y-%H%M%S', time.localtime())+'\n')
    outputFile.write('\n')

    fullString=''

    for snapshotNameInFolder in SnapshotNames:
        fullpath=downloads_path+"\\"+snapshotNameInFolder+".gz"
        gzip_file=gzip.GzipFile(fullpath,'rb')
        data = gzip_file.read()
        # преобразовываем в строку
        dataDecoded = data.decode('utf-8')
        fullString=fullString+dataDecoded

    ##ищем книгу и вкладку с помощью префиксов
    for searchedCube in cubesToSearch:
        outputFile.write(searchedCube+':\n')
        #Прейиксы для куба,книги и вкладки
        searchedString=str('\\"cube\\":\\"'+searchedCube+'\\"')
        searchedStringForBookPre=str('/shared/')
        searchedStringForBookPost=str('\\",')
        searchedStringForTabPre=str('\\"type\\":\\"container\\",\\"title\\":{\\"translationTable\\":{\\"Default\\":\\"')
        searchedStringForTabPost=str('\\"}}')

        #находим все появления куба на вкладках
        foundIndexes=[i for i in range(len(fullString)) if fullString.startswith(searchedString, i)]
        #проходим по ним, ищем книгу и вкладку
        prevTabString=''
        for index in foundIndexes:
            #ищем книгу
            foundBookIndexPre=fullString.rfind(searchedStringForBookPre,0,index)
            foundBookIndexPost=fullString.find(searchedStringForBookPost,foundBookIndexPre)
            BookString=fullString[foundBookIndexPre:foundBookIndexPost].replace(searchedStringForBookPre,'')
            #ищем вкладки
            foundTabIndexPre=fullString.rfind(searchedStringForTabPre,0,index)
            foundTabIndexPost=fullString.find(searchedStringForTabPost,foundTabIndexPre)
            TabString=fullString[foundTabIndexPre:foundTabIndexPost].replace(searchedStringForTabPre,'')
            if(prevTabString!=TabString):
                outputFile.write(BookString+' -- '+TabString+':\n')
            prevTabString=TabString     
        outputFile.write('\n')

    outputFile.close()



###Часть 3 GUI
# Define the function to be called when the Start button is clicked
def start():
    main(takeSnapshot=True)

def startWOPAW():
    main(takeSnapshot=False)

# Create the main window
root = tk.Tk()

# Set the window title and size
root.title("Python_Cube_Search_Script")
root.geometry("400x670")

notebook = ttk.Notebook(root)


tab1 = tk.Frame(notebook)
notebook.add(tab1, text="Создание снимка")

tab2 = tk.Frame(notebook)
notebook.add(tab2, text="Из готовых файлов")

tab3 = tk.Frame(notebook)
notebook.add(tab3, text="Настройки")


text_Hint_Server = tk.Label(tab1,text="Не выбрано = Дев", width=50)
text_Hint_Server.grid(row=0, column=0, columnspan=2)

varIsCAM=tk.BooleanVar(value=settings.isCAM)
checkbox2 = tk.Checkbutton(tab1, text="Тест Сервер",variable=varIsCAM)
checkbox2.grid(row=1, column=0)



varRememberMe=tk.BooleanVar(value=settings.rememberMe)
checkbox4 = tk.Checkbutton(tab1, text="Запомнить Меня?",variable=varRememberMe)
checkbox4.grid(row=6, column=0)

text_Login = tk.Label(tab1,text="Логин", width=50)
text_Login.grid(row=2, column=0, columnspan=2)

text_Password = tk.Label(tab1,text="Пароль", width=50)
text_Password.grid(row=4, column=0, columnspan=2)

if(varRememberMe.get()):
    varTextPassword=tk.StringVar(value=rsa.decrypt(settings.userPassword,privateKey).decode())
    varTextLogin=tk.StringVar(value=settings.userLogin)
else:
    varTextPassword=tk.StringVar(value='')
    varTextLogin=tk.StringVar(value='')


input_text_box_Password = tk.Entry(tab1, width=50,textvariable=varTextPassword)
input_text_box_Password.grid(row=5, column=0, columnspan=2)

input_text_box_Login = tk.Entry(tab1, width=50,textvariable=varTextLogin)
input_text_box_Login.grid(row=3, column=0, columnspan=2)

text_BD = tk.Label(tab1,text="База данных(Для Дев сервера)", width=50)
text_BD.grid(row=7, column=0, columnspan=2)

varTextBD=tk.StringVar(value=settings.database)
input_text_box_BD = tk.Entry(tab1, width=50,textvariable=varTextBD)
input_text_box_BD.grid(row=8, column=0, columnspan=2)

text_BD = tk.Label(tab1,text="Папка(Для Тест сервера)", width=50)
text_BD.grid(row=9, column=0, columnspan=2)

varTextFolder=tk.StringVar(value=settings.folder)
input_text_box_BD = tk.Entry(tab1, width=50,textvariable=varTextFolder)
input_text_box_BD.grid(row=10, column=0, columnspan=2)

text_Cubes = tk.Label(tab1,text="Ввод кубов для поиска", width=50)
text_Cubes.grid(row=11, column=0, columnspan=2)

# Create the input text box
text_widget_Cubes = tk.Text(tab1, height=20, width=50,)
text_widget_Cubes.grid(row=12, column=0, columnspan=2)
text_widget_Cubes.insert("1.0",array_to_string(settings.cubesToSearch))

#text_Output = tk.Label(tab1,text="Директория вывода", width=50)
#text_Output.grid(row=10, column=0, columnspan=2)

#varTextPath=tk.StringVar(value=settings.inputFilePath)
#input_text_box_Path = tk.Entry(tab1, width=50,textvariable=varTextPath)
#input_text_box_Path.grid(row=11, column=0, columnspan=2)

varDelete=tk.BooleanVar(value=settings.deleteAutoGeneratedSnapshots)
checkbox3 = tk.Checkbutton(tab1, text="Удалить в PAW автогенерированные снимки?",variable=varDelete)
checkbox3.grid(row=13, column=0)

# Create the Start button
start_button = tk.Button(tab1, text="Начать", width=10, command=start)
start_button.grid(row=14, column=0, columnspan=2)


########Вкладка 2

text_Snapshots = tk.Label(tab2,text="Введите названия снимков(в папке загрузок):", width=50)
text_Snapshots.grid(row=0, column=0, columnspan=2)

text_widget_Snapshots = tk.Text(tab2, height=4, width=50,)
text_widget_Snapshots.grid(row=1, column=0, columnspan=2)
text_widget_Snapshots.insert("1.0",array_to_string(settings.snapshotsToSearch))

text_Cubes_WOS = tk.Label(tab2,text="Ввод кубов для поиска", width=50)
text_Cubes_WOS.grid(row=3, column=0, columnspan=2)

# Create the input text box
text_widget_Cubes_WO_Snapshot = tk.Text(tab2, height=20, width=50,)
text_widget_Cubes_WO_Snapshot.grid(row=4, column=0, columnspan=2)
text_widget_Cubes_WO_Snapshot.insert("1.0",array_to_string(settings.cubesToSearch))

text_Cubes_SPACE = tk.Label(tab2,text="", width=50,height=11)
text_Cubes_SPACE.grid(row=5, column=0, columnspan=2)

start_button = tk.Button(tab2, text="Начать", width=10, command=startWOPAW)
start_button.grid(row=6, column=0, columnspan=2)


####### Вкладка 3

text_Ignore_Folders = tk.Label(tab3,text="Игнорируемые папки", width=50)
text_Ignore_Folders.grid(row=0, column=0, columnspan=2)

text_widget_Ignore_Folders = tk.Text(tab3, height=6, width=50,)
text_widget_Ignore_Folders.grid(row=1, column=0, columnspan=2)
text_widget_Ignore_Folders.insert("1.0",array_to_string(settings.ignoreBooksStrings))

text_Snapshot_Prefix = tk.Label(tab3,text="Префикс Снимков", width=50)
text_Snapshot_Prefix.grid(row=2, column=0, columnspan=2)

varSnapshotPrefixText=tk.StringVar(value=settings.SnapshotPrefixText)
input_text_box_Snapshot_Prefix= tk.Entry(tab3, width=50,textvariable=varSnapshotPrefixText)
input_text_box_Snapshot_Prefix.grid(row=3, column=0, columnspan=2)

notebook.pack()
# Start the GUI event loop
root.mainloop()







